#------------------- Global Variables (deploy-microcks-variables.sh) -------------------

#!/bin/bash

# Set your region
REGION="ap-south-1"

# Step 1: Get the default VPC ID
DEFAULT_VPC_ID=$(aws ec2 describe-vpcs \
  --region $REGION \
  --filters Name=isDefault,Values=true \
  --query "Vpcs[0].VpcId" \
  --output text)

# Check if the default VPC ID was fetched successfully
if [ "$DEFAULT_VPC_ID" == "None" ]; then
  echo "No default VPC found in region $REGION."
  exit 1
fi

echo "Default VPC ID: $DEFAULT_VPC_ID"

# Step 2: Get public subnet IDs from the default VPC
SUBNET_IDS=$(aws ec2 describe-subnets \
  --region $REGION \
  --filters Name=vpc-id,Values=$DEFAULT_VPC_ID Name=default-for-az,Values=true \
  --query "Subnets[*].SubnetId" \
  --output text)

# Check if any public subnets were found
if [ -z "$SUBNET_IDS" ]; then
  echo "No public subnets found in the default VPC."
  exit 1
fi

# Convert space-separated subnet IDs to comma-separated
SUBNET_IDS_COMMA=$(echo $SUBNET_IDS | tr ' ' ',')

echo "Public Subnet IDs: $SUBNET_IDS_COMMA"

# Step 3: Fetch the latest Aurora PostgreSQL engine version
LATEST_ENGINE_VERSION=$(aws rds describe-db-engine-versions \
  --region $REGION \
  --engine aurora-postgresql \
  --query "DBEngineVersions[0].EngineVersion" \
  --output text)

echo "Latest Aurora PostgreSQL Engine Version: $LATEST_ENGINE_VERSION"

# Step 4: Fetch default VPC security group ID
DEFAULT_SG_ID=$(aws ec2 describe-security-groups \
  --region $REGION \
  --filters Name=vpc-id,Values=$DEFAULT_VPC_ID Name=group-name,Values=default \
  --query "SecurityGroups[0].GroupId" \
  --output text)

echo "Default Security Group ID: $DEFAULT_SG_ID"

#------------------- Cluster deployment (deploy-eks.sh) -------------------


# Step 1: Deploy CloudFormation stack using the retrieved subnet IDs
aws cloudformation deploy \
  --template-file eks-cluster.yaml \
  --stack-name eks-microcks-stack \
  --capabilities CAPABILITY_NAMED_IAM \
  --parameter-overrides SubnetIds="[$SUBNET_IDS_COMMA]"

# Check if the stack was created successfully
if [ $? -eq 0 ]; then
  echo "CloudFormation stack deployed successfully."
else
  echo "Error deploying CloudFormation stack."
  exit 1
f

#------------------- Cluster deployment (eks-cluster.yaml) -------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: Create an EKS Cluster with a managed node group in the default VPC

Parameters:
  ClusterName:
    Type: String
    Default: microcks-cluster

  KubernetesVersion:
    Type: String
    Default: "1.32"

  NodeInstanceType:
    Type: String
    Default: t3.medium

  NodeGroupName:
    Type: String
    Default: microcks-nodes

  DesiredCapacity:
    Type: Number
    Default: 2

  MinSize:
    Type: Number
    Default: 1

  MaxSize:
    Type: Number
    Default: 3

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Comma-separated list of public subnet IDs (e.g., from default VPC)

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: !Ref NodeGroupName
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets: !Ref SubnetIds
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
      InstanceTypes:
        - !Ref NodeInstanceType
      AmiType: AL2_x86_64
      DiskSize: 20
      RemoteAccess:
        Ec2SshKey: your-key-name  # Optional: replace or remove if not needed

Outputs:
  ClusterName:
    Value: !Ref ClusterName
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
  ClusterARN:
    Value: !GetAtt EKSCluster.Arn
    
#------------------- Aurora Database Creation (deploy-aurora.sh) -------------------

# Step 1: Deploy CloudFormation stack (using an existing template)
aws cloudformation deploy \
  --template-file microcks-aurora-cluster.yaml \
  --stack-name microcks-db-stack \
  --parameter-overrides \
    SubnetIds=$SUBNET_IDS_COMMA \
    EngineVersion=$LATEST_ENGINE_VERSION \
    VpcSecurityGroupId=$DEFAULT_SG_ID \
  --capabilities CAPABILITY_NAMED_IAM \
  --region $REGION

# Step 2: Fetch DB cluster endpoint after deployment
ENDPOINT=$(aws rds describe-db-clusters --query "DBClusters[0].Endpoint" --output text --region $REGION)
echo "DB Cluster Endpoint: $ENDPOINT"

#------------------- Aurora Database Cloudformation (microcks-aurora-cluster.yaml) -------------------

AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  SubnetIds:
    Type: String
    Description: Comma-separated list of subnet IDs
  EngineVersion:
    Type: String
    Description: Aurora PostgreSQL Engine Version
  VpcSecurityGroupId:
    Type: String
    Description: Security Group ID for the VPC

Resources:
  MicrocksDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Microcks Aurora"
      SubnetIds: !Ref SubnetIds

  MicrocksDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: microcks-db-cluster
      Engine: aurora-postgresql
      EngineVersion: !Ref EngineVersion
      MasterUsername: microcks
      MasterUserPassword: microcks123
      DBSubnetGroupName: !Ref MicrocksDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref VpcSecurityGroupId
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 2
      BackupRetentionPeriod: 7
      EnableHttpEndpoint: true

  MicrocksDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: microcks-db-instance
      DBClusterIdentifier: !Ref MicrocksDBCluster
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      
#------------------- DocumentDB Database Creation (deploy-documentdb.sh) -------------------

# Step 1: Deploy CloudFormation stack
aws cloudformation deploy \
  --region $REGION \
  --template-file microcks-docdb-cluster.yaml \
  --stack-name microcks-docdb-stack \
  --capabilities CAPABILITY_NAMED_IAM \
  --parameter-overrides \
    SubnetIds=$SUBNET_IDS_COMMA \
    VpcSecurityGroupId=$DEFAULT_SG_ID

# Step 2: Output the cluster endpoint
ENDPOINT=$(aws docdb describe-db-clusters \
  --region $REGION \
  --query "DBClusters[0].Endpoint" \
  --output text)

echo "DocumentDB Cluster Endpoint: $ENDPOINT"


#------------------- DocumentDB Database Cloudformation (microcks-docdb-cluster.yaml) -------------------

AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  SubnetIds:
    Type: String
    Description: Comma-separated list of subnet IDs
  VpcSecurityGroupId:
    Type: String
    Description: Default VPC security group ID

Resources:
  MicrocksDocDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Microcks DocumentDB"
      SubnetIds: !Split [ ",", !Ref SubnetIds ]

  MicrocksDocDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: microcks-docdb-cluster
      Engine: docdb
      MasterUsername: microcks
      MasterUserPassword: microcks123
      DBSubnetGroupName: !Ref MicrocksDocDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref VpcSecurityGroupId


#------------------- Microcks Installment (deploy-databases.sh) -------------------

#------------------- Microcks installment Cloudformation (deploy-databases.yaml) -------------------

#------------------- Raw Commands for Global variables and deployment -------------------

# Set your AWS region
REGION="ap-south-1"
CLUSTER_NAME="microcks-cluster"

# Get latest supported Kubernetes version
LATEST_VERSION=$(aws eks describe-addon-versions \
  --region $REGION \
  --query "addons[?addonName=='kube-proxy'].addonVersions[].compatibilities[].clusterVersion" \
  --output text | tr '\t' '\n' | sort -uV | tail -n1)

# Get default VPC ID
DEFAULT_VPC_ID=$(aws ec2 describe-vpcs \
  --region $REGION \
  --filters Name=isDefault,Values=true \
  --query "Vpcs[0].VpcId" \
  --output text)

# Get public subnets from default VPC
PUBLIC_SUBNETS=$(aws ec2 describe-subnets \
  --region $REGION \
  --filters Name=vpc-id,Values=$DEFAULT_VPC_ID Name=default-for-az,Values=true \
  --query "Subnets[*].SubnetId" \
  --output text | tr '\t' ',')

# Echo for verification
echo "Region: $REGION"
echo "Kubernetes Version: $LATEST_VERSION"
echo "Default VPC ID: $DEFAULT_VPC_ID"
echo "Public Subnets: $PUBLIC_SUBNETS"

# Create EKS cluster
eksctl create cluster \
  --name $CLUSTER_NAME \
  --region $REGION \
  --version $LATEST_VERSION \
  --vpc-public-subnets $PUBLIC_SUBNETS \
  --nodegroup-name microcks-nodes \
  --node-type t3.medium \
  --nodes 2 \
  --nodes-min 1 \
  --nodes-max 3 \
  --managed

eksctl utils associate-iam-oidc-provider --region=$REGION --cluster=$CLUSTER_NAME --approve

eksctl update addon --name vpc-cni --cluster $CLUSTER_NAME --region $REGION

eksctl get cluster --name $CLUSTER_NAME

aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION

kubectl get nodes

aws rds create-db-subnet-group \
  --db-subnet-group-name microcks-subnet-group \
  --db-subnet-group-description "Subnet group for Microcks Aurora" \
  --subnet-ids subnet-01df6880678c3999a subnet-0fdbc0c54c4c75cac
  
  
aws rds create-db-cluster \
  --db-cluster-identifier microcks-db-cluster \
  --engine aurora-postgresql \
  --engine-version 15.10 \
  --master-username microcks \
  --master-user-password microcks123 \
  --vpc-security-group-ids sg-04c4a6a77fd165119 \
  --db-subnet-group-name microcks-subnet-group \
  --serverless-v2-scaling-configuration MinCapacity=0.5,MaxCapacity=2 \
  --backup-retention-period 7 \
  --enable-http-endpoint \
  --region ap-south-1
  
 aws rds create-db-instance \
  --db-instance-identifier microcks-db-instance \
  --db-cluster-identifier microcks-db-cluster \
  --engine aurora-postgresql \
  --db-instance-class db.serverless \
  --region ap-south-1

{
aws rds create-db-cluster   --db-cluster-identifier microcks-db-cluster   --engine aurora-postgresql   --master-username microcks   --master-user-password microcks123   --serverless-v2-scaling-configuration MinCapacity=0.5,MaxCapacity=2   --vpc-security-group-ids sg-04c4a6a77fd165119
}

aws rds describe-db-clusters --query "DBClusters[0].Endpoint" --output text

aws docdb create-db-cluster   --db-cluster-identifier microcks-docdb-cluster   --engine docdb   --master-username microcks   --master-user-password microcks123   --vpc-security-group-ids sg-04c4a6a77fd165119 

aws docdb describe-db-clusters --query "DBClusters[0].Endpoint" --output text

helm repo add microcks https://microcks.io/helm
helm repo update

helm install microcks microcks/microcks   --namespace microcks   --create-namespace   --set microcks.db.external=true   --set microcks.db.mongo.connectionString="mongodb://microcks:microcks123@microcks-db-cluster.cluster-cza0gcu8ejq5.ap-south-1.rds.amazonaws.com:27017/microcks"   --set microcks.db.postgres.host=microcks-db-cluster.cluster-cza0gcu8ejq5.ap-south-1.rds.amazonaws.com   --set microcks.db.postgres.user=microcks   --set microcks.db.postgres.password=microcks123

eksctl create addon --name aws-ebs-csi-driver --cluster microcks-cluster --region ap-south-1

kubectl get pods -n microcks

kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"

kubectl apply -f https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.12.0/v2_12_0_full.yaml

kubectl get deployment -n kube-system aws-load-balancer-controller




