AWSTemplateFormatVersion: '2010-09-09'
Description: Create Microcks EKS Cluster, Aurora Serverless DB Cluster, and DocumentDB Cluster.

Parameters:
  ClusterName:
    Type: String
    Default: microcks-cluster

  KubernetesVersion:
    Type: String
    Default: '1.32'

  NodeInstanceType:
    Type: String
    Default: t3.medium

  NodeGroupName:
    Type: String
    Default: microcks-nodes

  DesiredCapacity:
    Type: Number
    Default: 2

  MinSize:
    Type: Number
    Default: 1

  MaxSize:
    Type: Number
    Default: 3

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Comma-separated list of subnet IDs (for EKS and Aurora)

  DocDBSubnetIds:
    Type: String
    Description: Comma-separated list of subnet IDs (for DocumentDB)

  EngineVersion:
    Type: String
    Default: '13.6'
    Description: Aurora PostgreSQL Engine Version

  VpcSecurityGroupId:
    Type: String
    Description: Security Group ID for the VPC

Resources:

  ### EKS Cluster Resources ###
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      NodegroupName: !Ref NodeGroupName
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets: !Ref SubnetIds
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
      InstanceTypes:
        - !Ref NodeInstanceType
      AmiType: AL2_x86_64
      DiskSize: 20

  ### Aurora DB Resources ###
  MicrocksDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Microcks Aurora"
      SubnetIds: !Ref SubnetIds

  MicrocksDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: microcks-db-cluster
      Engine: aurora-postgresql
      EngineVersion: !Ref EngineVersion
      Port: 5432
      MasterUsername: microcks
      MasterUserPassword: microcks123
      DBSubnetGroupName: !Ref MicrocksDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref VpcSecurityGroupId
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 2
      BackupRetentionPeriod: 7
      EnableHttpEndpoint: true

  MicrocksDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: microcks-db-instance
      DBClusterIdentifier: !Ref MicrocksDBCluster
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless

  ### DocumentDB Resources ###
  MicrocksDocDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Microcks DocumentDB"
      SubnetIds: !Split [ ",", !Ref DocDBSubnetIds ]

  MicrocksDocDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: microcks-docdb-cluster
      MasterUsername: microcks
      MasterUserPassword: microcks123
      DBSubnetGroupName: !Ref MicrocksDocDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref VpcSecurityGroupId

  MicrocksDocDBInstance:
    Type: AWS::DocDB::DBInstance
    DependsOn:
      - MicrocksDocDBCluster
      - MicrocksDocDBSubnetGroup
    Properties:
      DBInstanceIdentifier: microcks-docdb-instance
      DBClusterIdentifier: !Ref MicrocksDocDBCluster
      DBInstanceClass: db.t3.medium

Outputs:
  ClusterName:
    Value: !Ref ClusterName

  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint

  ClusterARN:
    Value: !GetAtt EKSCluster.Arn

  AuroraClusterEndpoint:
    Value: !GetAtt MicrocksDBCluster.Endpoint

  DocumentDBClusterEndpoint:
    Value: !GetAtt MicrocksDocDBCluster.Endpoint
